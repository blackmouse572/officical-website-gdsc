// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String    @default("")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Post     Post[]
  Projects Project[]

  @@map(name: "users")
}

model Role {
  id          String  @id @default(cuid())
  title       String  @unique
  slug        String  @unique
  description String?
  isActived   Boolean @default(true)

  createdAt      DateTime         @default(now()) @map(name: "created_at")
  updatedAt      DateTime         @default(now()) @map(name: "updated_at")
  RolePermission RolePermission[]
  User           User[]

  @@map(name: "roles")
}

model Permission {
  id             String           @id @default(cuid())
  title          String           @unique
  slug           String           @unique
  description    String?
  isActived      Boolean          @default(true)
  RolePermission RolePermission[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map(name: "role_permissions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json?
  slug        String   @unique
  ogImage     String?  @map(name: "og_image")
  published   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  authorId    String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Project {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  ogImage   String?  @map(name: "og_image")
  slug      String   @unique
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  authors User[]

  @@map(name: "projects")
}

model Event {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  slug      String   @unique
  ogImage   String?  @map(name: "og_image")
  published Boolean  @default(false)
  startAt   DateTime @map(name: "start_at")
  endAt     DateTime @map(name: "end_at")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "events")
}
